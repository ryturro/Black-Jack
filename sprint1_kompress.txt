import random

# Card
class Card:
    def __init__(self, suit, value):
        self.suit = suit  # Kolor (np. "Hearts", "Diamonds")
        self.value = value  # Wartość (np. "A", "2", ..., "K")

    def __str__(self):
        return f"{self.value} of {self.suit}"

    def get_numeric_value(self):
        if self.value in ["J", "Q", "K"]:
            return 10
        elif self.value == "A":
            return 11  # Tymczasowo 11, później dostosowane w logice gry
        else:
            return int(self.value)

# Deck
class Deck:
    def __init__(self):
        self.build()

    def build(self):
        suits = ["Hearts", "Diamonds", "Clubs", "Spades"]
        values = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]
        self.cards = [Card(suit, value) for suit in suits for value in values]

    def shuffle(self):
        random.shuffle(self.cards)

    def deal_card(self):
        return self.cards.pop()

# Player
class Player:
    def __init__(self, name):
        self.name = name
        self.hand = []
        self.score = 0

    def add_card(self, card):
        self.hand.append(card)
        self.calculate_score()

    def calculate_score(self):
        self.score = sum(card.get_numeric_value() for card in self.hand)
        aces = sum(1 for card in self.hand if card.value == "A")
        while self.score > 21 and aces:
            self.score -= 10
            aces -= 1

    def show_hand(self):
        return ", ".join(str(card) for card in self.hand)

# Dealer
class Dealer(Player):
    def __init__(self):
        super().__init__("Dealer")

    def show_partial_hand(self):
        return f"{self.hand[0]}, [Hidden Card]"

# Check_winner
def check_winner(player, dealer):
    if player.score > 21:
        return "Player busts! Dealer wins."
    elif dealer.score > 21:
        return "Dealer busts! Player wins."
    elif player.score == dealer.score:
        return "It's a tie!"
    elif player.score > dealer.score:
        return "Player wins!"
    else:
        return "Dealer wins!"

